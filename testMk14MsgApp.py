
import mk14ui
import ins8060cpu

def testUpdateUI():
    global n
    for i in range(8):
        mk14UI.digits[i].show(n)
    n = (n+1) % 16
    mk14UI.tkRoot.after(1000, testUpdateUI)
n = 0

HALT = 0x00
XAE = 0x01
ADE = 0x70
LD0 = 0xc0
LD1 = 0xc1
LD2 = 0xc2
LD3 = 0xc3
LDI = 0xc4
LDAT1 = 0xc5
LDAT2 = 0xc6
LDAT3 = 0xc7
ST0 = 0xc8
ST1 = 0xc9
ST2 = 0xca
ST3 = 0xcb
CCL = 0x02
XPAL0 = 0x30
XPAL1 = 0x31
XPAL2 = 0x32
XPAL3 = 0x33
XPAH0 = 0x34
XPAH1 = 0x35
XPAH2 = 0x36
XPAH3 = 0x37
RR = 0x1e
RRL = 0x1f
ADD0 = 0xf0
ADD1 = 0xf1
ADD2 = 0xf2
ADD3 = 0xf3
XPPC3 = 0x3f
JP = 0x94
JNZ = 0x9c
JMP = 0x90
DLD2 = 0xba
ILD0 = 0xa8
DLD0 = 0xb8

#memCode = (0xf20, [LDI, 0x0d, XPAH1, LDI, 0x00, XPAL1, \
#       LDI, 0x28, ST1, 0x00,  HALT ])

memCode = (0xf20, [LDI, 0x0d, XPAH1, LDI, 0x00, XPAL1, \
        LDI, 0x0f, XPAH2, LDI, 0xca, XPAL2,
        LDI, 0x01, ST0, 0xf0, LDI, 0x07, XAE,
        LD2, 0x80, ST1, 0x80, LDI, 0xff, CCL,
        ADE, JP, 0xf5, DLD0, 0xe1, JNZ, 0xef,
        LDAT2, 0xff, JP, 0xe7, JMP, 0xdf,
        HALT ])

memData = (0xfa0, [0x80, 0x79,0x79,0x6d,0x40,0x37,
                   0x77,0x39,0x40,0x3e,0x3f,0x6e,
                   0x40,0x6d,0x77,0x40,0x6e,0x3e,
                   0x7f,0x40,0x79,0x37,0x30,0x71,
                   0x40,0x6e,0x38,0x38,0x3f,0x1f,
                   0x40,0x77,0x40,0x6d,0x30,0x40,
                   0x39,0x40,0x71,0x3f,0x40,0x6d,
                   0x40,0x79,0x79,0x6d,0x40,0x37,
                   0x77,0x39])

cpu = ins8060cpu.CPU_INS8060([memCode, memData], 0xf20, False, {"base":0xf1f,"count":1})

#mk14UI.tkRoot.after(1000, testUpdateUI)
mk14UI = mk14ui.MK14_UI(cpu.getMemMap())

closing = False
while not closing:
    cpu.service()
    closing = mk14UI.service()
mk14UI.close()
